{"version":3,"sources":["components/AppTitle.js","layout/Header.js","functions/getContrastRatio.js","layout/Form.js","components/PalettesSelectionButton.js","components/ColourButton.js","components/Palette.js","components/PalettesSelection.js","functions/shuffleArray.js","layout/Main.js","layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["AppTitle","props","componentClass","cn","expand","className","Header","this","formFocused","Component","getContrastRatio","hexcolor","parseInt","substr","Form","throwErrorMessage","error","setState","errorMessage","formSubmitted","analyzeText","axios","method","url","process","dataResponse","headers","data","documents","language","id","text","state","stringToQuery","getColourPalettes","analyzedText","keyWordsArray","keyPhrases","keyWordsToQuery","keyWordsToDisplay","length","Math","floor","random","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","keywords","numResults","format","then","response","dataHandler","catch","handleFormSubmit","e","a","preventDefault","handleTextInput","target","value","closeErrorMessage","onSubmit","htmlFor","rows","onChange","onFocus","formFocusListener","onBlur","style","textBackground","background","color","type","onClick","PaletteSelectionButton","disabled","selectionHandler","direction","ColourButton","descriptorWord","colour","clickHandler","isChosen","colourName","require","from","maroon","red","pink","brown","orange","apricot","olive","yellow","beige","lime","green","mint","teal","cyan","navy","blue","purple","lavender","magenta","white","grey","black","nearestColour","name","Palette","changeColourChoice","colourButtonListener","colourChoice","paletteInfo","colors","map","i","key","PalettesSelection","changePalettes","newIndex","previous","currentIndex","next","undefined","palettesArray","loadingState","currentPalette","PalettesSelectionButton","shuffleArray","arr","m","Main","setPalettes","arrayOfPalettes","arrayOfKeyWords","keyWordPromises","forEach","keyWord","keyWordArray","split","word","push","all","spread","allSynonyms","responses","wordsArray","words","syn","pushAllWords","noun","verb","adjective","isLoading","allPalettesArray","handleColourChoice","colourSelection","formHandler","errorThrown","didFormSubmit","Footer","href","App","handleFormFocus","didFormFocus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fab18cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport cn from 'classnames';\r\n\r\nfunction AppTitle(props) {\r\n\r\n  const componentClass = cn(\r\n    'AppTitle__heading',\r\n    {'AppTitle__heading--expand': props.expand}\r\n  );\r\n\r\n  return (\r\n    <div className=\"AppTitle\">\r\n      <h1 className={componentClass}>Colour in the Lines</h1>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default AppTitle;","import React, { Component } from 'react';\r\nimport AppTitle from '../components/AppTitle';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"HeaderComponent\">\r\n        <section className=\"wrapper u-centerText\">\r\n          <AppTitle \r\n            expand={this.props.formFocused}\r\n          />\r\n        </section>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","  // Check contrast ratio of colour before changing the background of the text input\r\n  // Change the colour of the text to make it accessible\r\n  const getContrastRatio = function(hexcolor) {\r\n    const r = parseInt(hexcolor.substr(0,2),16);\r\n    const g = parseInt(hexcolor.substr(2,2),16);\r\n    const b = parseInt(hexcolor.substr(4,2),16);\r\n    const yiq = ((r*299)+(g*587)+(b*114))/1000;\r\n    return (yiq >= 128) ? 'black' : 'white';\r\n  }\r\n\r\n  export default getContrastRatio;","import React, { Component } from \"react\";\r\nimport Qs from \"qs\";\r\nimport axios from \"axios\";\r\nimport getContrastRatio from \"../functions/getContrastRatio\";\r\n// import analyzeText from \"../functions/analyzeText\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      stringToQuery: \"\",\r\n      errorMessage: \"\"\r\n    };\r\n  }\r\n\r\n  // Sets the error message within the form\r\n  throwErrorMessage = error => {\r\n    this.setState({\r\n      errorMessage: error\r\n    });\r\n\r\n    this.props.formSubmitted(true);\r\n  };\r\n\r\n  // Returns an array of keywords taken from the user's input\r\n  analyzeText = () => {\r\n    return axios({\r\n      method: \"post\",\r\n      url: process.env.REACT_APP_ENDPOINT,\r\n      dataResponse: \"json\",\r\n      headers: {\r\n        \"Ocp-Apim-Subscription-Key\": process.env.REACT_APP_API_KEY,\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      data: {\r\n        documents: [\r\n          {\r\n            language: \"en\",\r\n            id: \"1\",\r\n            text: this.state.stringToQuery\r\n          }\r\n        ]\r\n      }\r\n    });\r\n  };\r\n\r\n  // Fetches the matching colour palette results to the extracted keywords\r\n  getColourPalettes = analyzedText => {\r\n\r\n    const keyWordsArray = analyzedText.data.documents[0].keyPhrases;\r\n\r\n    let keyWordsToQuery = \"\";\r\n    let keyWordsToDisplay = [];\r\n\r\n    if (!keyWordsArray.length) {\r\n      // If there are no extracted keywords, use the original user text\r\n      keyWordsToQuery = this.state.stringToQuery;\r\n    } else if (keyWordsArray.length === 1) {\r\n      // If there is 1 extracted keyword, use that\r\n      keyWordsToQuery = keyWordsArray[0];\r\n      keyWordsToDisplay = keyWordsArray;\r\n    } else {\r\n      // Take a random keyword to query the colours API\r\n      const keyword = keyWordsArray[Math.floor(Math.random() * keyWordsArray.length)];\r\n\r\n      keyWordsToQuery = keyword;\r\n      keyWordsToDisplay = keyWordsArray;\r\n    }\r\n\r\n    axios({\r\n      method: \"get\",\r\n      url: \"https://proxy.hackeryou.com\",\r\n      dataResponse: \"json\",\r\n      paramsSerializer: function(params) {\r\n        return Qs.stringify(params, { arrayFormat: \"brackets\" });\r\n      },\r\n      params: {\r\n        reqUrl: \"http://www.colourlovers.com/api/palettes\",\r\n        params: {\r\n          keywords: keyWordsToQuery,\r\n          numResults: 10,\r\n          format: \"json\"\r\n        }\r\n      }\r\n    })\r\n      .then(response => {\r\n        // Check if there are matching palettes related to the search query\r\n        if (response.data.length) {\r\n          // pass data up to parent component\r\n          this.props.dataHandler(response.data, keyWordsToDisplay);\r\n\r\n          // reset the error message\r\n          this.setState({\r\n            errorMessage: \"\"\r\n          });\r\n        } else {\r\n          this.throwErrorMessage(\r\n            `Sorry, we couldn't find any matching palettes for your text. Try again!`\r\n          );\r\n        }\r\n      })\r\n      .catch(error => {\r\n        this.throwErrorMessage(`Sorry, something went wrong: ${error}.`);\r\n      });\r\n  };\r\n\r\n  // Query the API with thy keywords from the user's input\r\n  handleFormSubmit = async e => {\r\n    e.preventDefault();\r\n    this.props.formSubmitted();\r\n\r\n    // make sure the user has text to query the API\r\n    if (this.state.stringToQuery) {\r\n      const analyzedText = await this.analyzeText();\r\n\r\n      this.getColourPalettes(analyzedText);\r\n    } else {\r\n      this.throwErrorMessage(`Please type something into the text field.`);\r\n    }\r\n  };\r\n\r\n  // Update state when text is being input\r\n  handleTextInput = e => {\r\n    this.setState({\r\n      stringToQuery: e.target.value\r\n    });\r\n  };\r\n\r\n  // Removes the error message\r\n  closeErrorMessage = () => {\r\n    this.setState({\r\n      errorMessage: \"\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"FormComponent col-1-of-2--lg\">\r\n        <div className=\"wrapper\">\r\n          <form\r\n            className=\"FormComponent__form\"\r\n            onSubmit={this.handleFormSubmit}\r\n          >\r\n            <label htmlFor=\"textInput\" className=\"FormComponent__label\">\r\n              Write some text here!\r\n            </label>\r\n\r\n            <textarea\r\n              rows=\"3\"\r\n              className=\"FormComponent__textarea\"\r\n              id=\"textInput\"\r\n              value={this.props.stringToQuery}\r\n              onChange={this.handleTextInput}\r\n              onFocus={this.props.formFocusListener}\r\n              onBlur={this.props.formFocusListener}\r\n              style={\r\n                this.props.textBackground\r\n                  ? {\r\n                      background: `#${this.props.textBackground}`,\r\n                      color: getContrastRatio(this.props.textBackground)\r\n                    }\r\n                  : null\r\n              }\r\n            ></textarea>\r\n\r\n            <button type=\"submit\" className=\"button FormComponent__button\">\r\n              Get Colours\r\n            </button>\r\n\r\n            {this.state.errorMessage ? (\r\n              <div className=\"FormComponent__error-container\">\r\n\r\n                  <button className=\"FormComponent__error-button\" onClick={this.closeErrorMessage}>X</button>\r\n                  <p className=\"FormComponent__error\">{this.state.errorMessage}</p>\r\n\r\n              </div>\r\n            ) : null}\r\n\r\n          </form>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport cn from 'classnames';\r\n\r\nfunction PaletteSelectionButton(props) {\r\n\r\n  const componentClass = cn(\r\n    'button',\r\n    'PalettesSelectionButton',\r\n    {'PalettesSelectionButton--disabled': props.disabled}\r\n  );\r\n\r\n  return (\r\n    <button\r\n      className={componentClass}\r\n      disabled={props.disabled}\r\n      onClick={e => props.selectionHandler(props.direction)}\r\n    >\r\n      {props.direction}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PaletteSelectionButton;\r\n","import React from \"react\";\r\nimport cn from \"classnames\";\r\nimport getContrastRatio from '../functions/getContrastRatio';\r\n\r\nfunction ColourButton({ descriptorWord, colour, clickHandler, isChosen }) {\r\n  const colors = {\r\n    maroon: \"#800000\",\r\n    red: \"#e6194B\",\r\n    pink: \"#fabebe\",\r\n    brown: \"#9A6324\",\r\n    orange: \"#f58231\",\r\n    apricot: \"#ffd8b1\",\r\n    olive: \"#808000\",\r\n    yellow: \"#ffe119\",\r\n    beige: \"#fffac8\",\r\n    lime: \"#bfef45\",\r\n    green: \"#3cb44b\",\r\n    mint: \"#aaffc3\",\r\n    teal: \"#469990\",\r\n    cyan: \"#42d4f4\",\r\n    navy: \"#000075\",\r\n    blue: \"#4363d8\",\r\n    purple: \"#911eb4\",\r\n    lavender: \"#e6beff\",\r\n    magenta: \"#f032e6\",\r\n    white: \"#ffffff\",\r\n    grey: \"#a9a9a9\",\r\n    black: \"#000000\"\r\n  };\r\n\r\n  const componentClass = cn(\"ColourButton\", {\r\n    \"ColourButton--selected\": isChosen\r\n  });\r\n\r\n  const nearestColour = require(\"nearest-color\").from(colors);\r\n  const colourName = nearestColour(colour).name;\r\n\r\n  return (\r\n    <button\r\n      className={componentClass}\r\n      onClick={e => clickHandler(e, colour)}\r\n      style={{\r\n        color: getContrastRatio(colour),\r\n        background: `#${colour}`\r\n      }}\r\n    >\r\n      {descriptorWord ? descriptorWord + \" \" + colourName : colourName}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ColourButton;\r\n","import React, { Component } from \"react\";\r\nimport ColourButton from \"./ColourButton\";\r\n\r\nclass Palette extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      colourChoice: this.props.paletteInfo.colors[0]\r\n    }\r\n  }\r\n\r\n  // Sets the colour that is the current text box colour\r\n  changeColourChoice = (e, colour) => {\r\n    this.props.colourButtonListener(colour);\r\n    this.setState({\r\n      colourChoice: colour\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"Palette\">\r\n        {[...this.props.paletteInfo.colors].map((colour, i) => (\r\n          <li className=\"Palette__item\" key={i}>\r\n            <ColourButton\r\n              isChosen={colour === this.state.colourChoice}\r\n              colour={colour}\r\n              clickHandler={this.changeColourChoice}\r\n              descriptorWord={this.props.keyWordsArray[i]}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Palette;\r\n","import React, { Component } from \"react\";\r\nimport PalettesSelectionButton from \"./PalettesSelectionButton\";\r\nimport Palette from \"./Palette\";\r\n\r\nclass PalettesSelection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentIndex: 0\r\n    };\r\n  }\r\n\r\n  // Change the current palette based on the direction button pressed\r\n  changePalettes = direction => {\r\n    const indexChange = {\r\n      previous: this.state.currentIndex - 1,\r\n      next: this.state.currentIndex + 1\r\n    };\r\n\r\n    // The new index in the palettes array\r\n    const newIndex = indexChange[direction];\r\n\r\n    // Make sure a non-existant index cannot be reached\r\n    if (this.props.palettesArray[newIndex] !== undefined) {\r\n      this.setState({\r\n        currentIndex: newIndex\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      palettesArray,\r\n      colourButtonListener,\r\n      keyWordsArray,\r\n      loadingState\r\n    } = this.props;\r\n    const { currentIndex } = this.state;\r\n\r\n    const currentPalette = palettesArray[this.state.currentIndex];\r\n\r\n    if (loadingState) {\r\n      return <h2 className=\"PalettesSelection__preloader\">LOADING</h2>;\r\n    } else {\r\n      return (\r\n        <section className=\"PalettesSelection col-1-of-2--lg\">\r\n          <div className=\"wrapper PalettesSelection__container\">\r\n            <div className=\"PalettesSelection__button PalettesSelection__button--left\">\r\n              <PalettesSelectionButton\r\n                direction=\"previous\"\r\n                selectionHandler={this.changePalettes}\r\n                disabled={currentIndex === 0 ? true : false}\r\n              />\r\n            </div>\r\n\r\n            <Palette\r\n              paletteInfo={currentPalette}\r\n              colourButtonListener={colourButtonListener}\r\n              keyWordsArray={keyWordsArray}\r\n            />\r\n\r\n            <div className=\"PalettesSelection__button PalettesSelection__button--right\">\r\n              <PalettesSelectionButton\r\n                direction=\"next\"\r\n                selectionHandler={this.changePalettes}\r\n                disabled={\r\n                  this.state.currentIndex === palettesArray.length - 1\r\n                    ? true\r\n                    : false\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default PalettesSelection;\r\n","const shuffleArray = ([...arr]) => {\r\n  let m = arr.length;\r\n  while (m) {\r\n    const i = Math.floor(Math.random() * m--);\r\n    [arr[m], arr[i]] = [arr[i], arr[m]];\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport default shuffleArray;","import React, { Component } from \"react\";\r\nimport Form from \"./Form\";\r\nimport PalettesSelection from \"../components/PalettesSelection\";\r\nimport axios from \"axios\";\r\nimport Qs from \"qs\";\r\nimport shuffleArray from \"../functions/shuffleArray\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      didFormSubmit: false,\r\n      isLoading: true,\r\n      allPalettesArray: [],\r\n      colourSelection: null,\r\n      keyWordsArray: []\r\n    };\r\n  }\r\n\r\n  // Display all of the information to the user\r\n  setPalettes = (arrayOfPalettes, arrayOfKeyWords) => {\r\n\r\n    // Query the API for synonyms related to each keyword passed from the text analyzer\r\n    const keyWordPromises = [];\r\n    arrayOfKeyWords.forEach(keyWord => {\r\n      // Sometimes the analyzed keyword is multiple words\r\n      const keyWordArray = keyWord\r\n        .split(\" \")\r\n        .map(word => {\r\n        return axios({\r\n          method: \"get\",\r\n          url: \"https://proxy.hackeryou.com\",\r\n          dataResponse: \"json\",\r\n          paramsSerializer: function(params) {\r\n            return Qs.stringify(params, { arrayFormat: \"brackets\" });\r\n          },\r\n          params: {\r\n            reqUrl: `${process.env.REACT_APP_API_ENDPOINT_2}${word}/json`\r\n          }\r\n        });\r\n      });\r\n\r\n      keyWordPromises.push(...keyWordArray);\r\n    });\r\n\r\n    // Take all of the synonyms and push them to state\r\n    axios\r\n      .all(keyWordPromises)\r\n      .then(axios.spread((...responses) => {\r\n\r\n        // Extract all keywords from an unknown amount of API requests\r\n        const allSynonyms = [];\r\n        responses.forEach(response => {\r\n\r\n          const { noun, verb, adjective } = response.data;\r\n\r\n          function pushAllWords(...wordsArray) {\r\n            wordsArray.forEach(words => {\r\n              if (words !== undefined) {\r\n                allSynonyms.push(...words.syn);\r\n              }\r\n            })\r\n          }\r\n          pushAllWords(noun, verb, adjective);\r\n        });\r\n\r\n        // If there are no synonyms, set the keyWordsArray state to an empty array\r\n        if (allSynonyms.length) {\r\n          // Shuffle the synonyms array (So the results aren't the same every form submission)\r\n          this.setState({\r\n            isLoading: false,\r\n            allPalettesArray: arrayOfPalettes,\r\n            keyWordsArray: shuffleArray(allSynonyms)\r\n          });\r\n        } else {\r\n          this.setState({\r\n            isLoading: false,\r\n            allPalettesArray: arrayOfPalettes,\r\n            keyWordsArray: []\r\n          });\r\n        }\r\n      }))\r\n      .catch(() => {\r\n        // These colour descriptions aren't critical to the app\r\n        // Push the other data over to the results instead\r\n        this.setState({\r\n          isLoading: false,\r\n          allPalettesArray: arrayOfPalettes,\r\n          keyWordsArray: []\r\n        });\r\n      });\r\n  };\r\n\r\n  // Rerender when a colour has been chosen\r\n  handleColourChoice = colour => {\r\n    this.setState({\r\n      colourSelection: colour\r\n    });\r\n  };\r\n\r\n  // Render preloader\r\n  // If there was an error in the colour palette request remove it\r\n  formHandler = (errorThrown = false) => {\r\n    if (errorThrown) {\r\n      this.setState({\r\n        didFormSubmit: false,\r\n        isLoading: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        didFormSubmit: true,\r\n        isLoading: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { didFormSubmit, allPalettesArray, keyWordsArray, colourSelection, isLoading} = this.state;\r\n\r\n    return (\r\n      <main className=\"flexGrid wrapper\">\r\n        <Form\r\n          dataHandler={this.setPalettes}\r\n          formFocusListener={this.props.formFocusListener}\r\n          textBackground={colourSelection}\r\n          formSubmitted={this.formHandler}\r\n        />\r\n\r\n        {didFormSubmit  ? (\r\n          <PalettesSelection\r\n            palettesArray={allPalettesArray}\r\n            colourButtonListener={this.handleColourChoice}\r\n            keyWordsArray={keyWordsArray}\r\n            loadingState={isLoading}\r\n          />\r\n        ) : null}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"FooterComponent\">\r\n      <div className=\"wrapper FooterComponent__container flexGrid\">\r\n        <div className=\"col-1-of-2\">\r\n          <ul className=\"FooterCredits__list\">\r\n            <li className=\"FooterCredits__item\">\r\n              <p>\r\n                Colour Palettes from{\" \"}\r\n                <a href=\"https://www.colourlovers.com/\">COLOURLovers</a>\r\n              </p>\r\n            </li>\r\n            <li className=\"FooterCredits__item\">\r\n              <p>\r\n                Text Analytics by{\" \"}\r\n                <a href=\"https://azure.microsoft.com/en-ca/services/cognitive-services/text-analytics/\">\r\n                  Microsoft Azure\r\n                </a>\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"col-1-of-2\">\r\n          <p className=\"FooterComponent__personalInfo\">\r\n            Created by <a href=\"http://russellbentulan.com\">Russell Bentulan </a>\r\n            2019\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport Header from './layout/Header';\nimport Main from './layout/Main';\nimport Footer from './layout/Footer';\n\nimport './styles/App.scss';\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n\n    this.state = {\n      didFormFocus: false\n    }\n  }\n\n  // Animate the AppTitle component when the user focuses on the textarea\n  handleFormFocus = () => {\n    this.setState({ \n      didFormFocus: !this.state.didFormFocus\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Header formFocused={this.state.didFormFocus} />\n\n        <Main formFocusListener={this.handleFormFocus} />\n\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}